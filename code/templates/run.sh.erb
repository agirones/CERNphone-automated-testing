#!/bin/bash
# Main user controlled variables
# Report type to provide
#REPORT_TYPE='monit_report'
REPORT_TYPE='<%= @report_type %>'
# voip_patrol log level on console
VP_LOG_LEVEL=0

# Private variables
declare -a CONTAINERS=('database' 'prepare' 'vp' 'report' )
export REGISTRY='<%= @docker_repository %>'

# Images names
for CONTAINER in ${CONTAINERS[@]}; do
    export ${CONTAINER^^}_IMAGE_NAME=$REGISTRY$CONTAINER
done

# Containers names
for CONTAINER in ${CONTAINERS[@]}; do
    export ${CONTAINER^^}_CONTAINER_NAME=$CONTAINER
done

WORKING_DIRECTORY=/root

TIMEZONE=Europe/Paris

# Volumes paths in host
PATH_HOST_INPUT=$WORKING_DIRECTORY/tmp/input
PATH_HOST_OUTPUT=$WORKING_DIRECTORY/tmp/output
PATH_HOST_VOICE_FILES=$WORKING_DIRECTORY/voice_ref_files
PATH_HOST_SCENARIOS=$WORKING_DIRECTORY/scenarios

# Volumes in containers
PATH_PREPARE_INPUT=/opt/input
PATH_PREPARE_OUTPUT=/opt/output
PATH_VP_OUTPUT=/output
PATH_VP_VOICE_FILES=/voice_ref_files
PATH_REPORT_INPUT=/opt/scenarios
PATH_REPORT_OUTPUT=/opt/report

# voip_patrol
VP_PORT=5060
VP_RESULT_FILE="voip_patrol.jsonl"
VP_LOG_LEVEL_FILE=${VP_LOG_LEVEL}
VP_PATH_RESULT_FILE=${WORKING_DIRECTORY}/tmp/output/${VP_RESULT_FILE}

# database
DATABASE_RESULT_FILE="database.jsonl"
DATABASE_PATH_RESULT_FILE=${WORKING_DIRECTORY}/tmp/output/${DATABASE_RESULT_FILE}

LOCK_DIRECTORY=/tmp/volts.lock
PREPARE_CHECK=$WORKING_DIRECTORY/tmp/input/scenarios.done


pull_images() {
    for CONTAINER in ${CONTAINERS[@]}; do
        REPOSITORY=${CONTAINER^^}_IMAGE_NAME
        docker pull ${!REPOSITORY}:latest
    done
    docker image prune -f > /dev/null
}


run_prepare() {
    rm -f $PREPARE_CHECK
    mkdir -p $WORKING_DIRECTORY/tmp/{input,output}

    docker stop ${PREPARE_CONTAINER_NAME} >> /dev/null 2>&1
    docker rm ${PREPARE_CONTAINER_NAME} >> /dev/null 2>&1

    docker run --name=${PREPARE_CONTAINER_NAME} \
        --env SCENARIO_NAME=${SCENARIO} \
        --volume $PATH_HOST_SCENARIOS:$PATH_PREPARE_INPUT \
        --volume $PATH_HOST_INPUT:$PATH_PREPARE_OUTPUT \
        --network none \
        --rm \
        ${PREPARE_IMAGE_NAME}

    if [ ! -f $PREPARE_CHECK ]; then
        echo "Scenarios are not prepared, please check for the errors"
        exit 1
    fi
}

run_database() {
    PATH_HOST_DB_CONFIGURATION=${WORKING_DIRECTORY}/tmp/input/${WORKING_SCENARIO}/database.xml
    PATH_DB_CONFIGURATION=/xml/${WORKING_SCENARIO}.xml

    docker stop ${DATABASE_CONTAINER_NAME} >> /dev/null 2>&1
    docker rm ${DATABASE_CONTAINER_NAME} >> /dev/null 2>&1

    if [ ! -f $PATH_HOST_DB_CONFIGURATION ]; then 
        return
    fi

    docker run --name=${DATABASE_CONTAINER_NAME} \
        --env SCENARIO=${WORKING_SCENARIO} \
        --env STAGE=$1 \
        --volume $PATH_HOST_DB_CONFIGURATION:$PATH_DB_CONFIGURATION \
        --network host \
        --rm \
        ${DATABASE_IMAGE_NAME}

}
 
run_voip_patrol() {
    PATH_HOST_VP_CONFIGURATION=$WORKING_DIRECTORY/tmp/input/${WORKING_SCENARIO}/voip_patrol.xml
    PATH_VP_CONFIGURATION=/xml/${WORKING_SCENARIO}.xml

    if [ ! -f $PATH_HOST_VP_CONFIGURATION ]; then
        return
    fi

    docker run --name=${VP_CONTAINER_NAME} \
    --env XML_CONF=${WORKING_SCENARIO} \
    --env PORT=${VP_PORT} \
    --env RESULT_FILE=${VP_RESULT_FILE} \
    --env LOG_LEVEL=${VP_LOG_LEVEL} \
    --env LOG_LEVEL_FILE=${VP_LOG_LEVEL_FILE} \
    --volume $PATH_HOST_VP_CONFIGURATION:$PATH_VP_CONFIGURATION \
    --volume $PATH_HOST_OUTPUT:$PATH_VP_OUTPUT \
    --volume $PATH_HOST_VOICE_FILES:$PATH_VP_VOICE_FILES \
    --network host \
    --rm \
    ${VP_IMAGE_NAME} 2>/dev/null

}

run_report() {
    docker stop ${REPORT_CONTAINER_NAME} >> /dev/null 2>&1
    docker rm ${REPORT_CONTAINER_NAME} >> /dev/null 2>&1

    docker run --name=${REPORT_CONTAINER_NAME} \
        --env REPORT_FILE=${VP_RESULT_FILE} \
        --env REPORT_TYPE=${REPORT_TYPE} \
        --env MONIT_ADDRESS='<%= @monit_address %>' \
        --env THRESHOLD_DEGRADED=<%= @threshold_degraded %> \
        --env THRESHOLD_UNAVAILABLE=<%= @threshold_unavailable %> \
        --env IS_SEND_TO_MONIT='<%= @is_send_to_monit %>' \
        --env CONTACT='<%= @contact %>' \
        --volume $PATH_HOST_INPUT:$PATH_REPORT_INPUT \
        --volume $PATH_HOST_OUTPUT:$PATH_REPORT_OUTPUT \
        --network host \
        --rm \
        ${REPORT_IMAGE_NAME}

}

cleanup() {
  rm -r $LOCK_DIRECTORY
}


if ! mkdir "$LOCK_DIRECTORY"; then
  echo >&2 "cannot acquire lock, giving up on $LOCK_DIRECTORY"
  exit 1
fi

trap cleanup EXIT

pull_images
run_prepare
rm -f $VP_PATH_RESULT_FILE
rm -f $DATABASE_PATH_RESULT_FILE

for DIRECTORY in ${WORKING_DIRECTORY}/tmp/input/*; do
  if [ -f ${DIRECTORY}/voip_patrol.xml ]; then
      WORKING_SCENARIO=`basename ${DIRECTORY}`
      run_database pre
      run_voip_patrol
      run_database post
  fi
done

run_report
rm -r $LOCK_DIRECTORY
